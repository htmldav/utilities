curl -L "https://github.com/docker/compose/releases/download/v2.6.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
http://localhost:8095/App42PaaS-Java-MySQL-Sample-0.0.1-SNAPSHOT/

docker-compose build --no-cache
docker-compose ps
docker-compose down
docker network ls
docker ps --format "table {{.ID}}\t{{.Status}}\t{{.Names}}"
docker network ls
docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' stage-myapp-mysql-1
docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' stage-web-1
docker network inspect -f '{{json .Containers}}' 210d51e718e5 | jq '.[] | .Name + ":" + .IPv4Address'
docker exec stage-web-1 ping 172.24.2.1
mysql -u acp4pogynvaeidfj -p

docker exec stage-myapp-mysql-1 cat /etc/hosts
docker exec stage-web-1 cat /etc/hosts
docker exec stage-web-1 ping 172.24.2.1
docker exec -it stage-web-1 /bin/bash
clear
docker exec -it stage-web-1 /bin/bash
docker exec -it stage-myapp-mysql-1 /bin/bash

aws ec2 create-security-group --group-name MySecurityGroup325 --description "Allow 22 port"

{
    "GroupId": "sg-0046af06d5db47b46"
}

aws ec2 authorize-security-group-ingress --group-name MySecurityGroup325 --protocol tcp --port 22 --cidr 0.0.0.0/0

aws ec2 create-key-pair --key-name MyKeyPair

aws ec2 create-key-pair --key-name my-key325 --query 'KeyMaterial' --output text > ~/.ssh/my-key.pem

chmod 400 ~/.ssh/my-key.pem
chmod 400 /.ssh/my-key.pem

aws ec2 run-instances \
    --image-id ami-09d56f8956ab235b3 \
    --instance-type t2.micro \
    --count 1 \
    --key-name my-key325 \
    --security-groups MySecurityGroup325 \
    --block-device-mappings DeviceName=/dev/sdh,Ebs={VolumeSize=15}

ss -tpln

sudo apt update
sudo apt install python3-pip

pip3 install boto3

openssl rand -base64 2048 > vault.pass

ansible-vault create group_vars/all/pass.yml --vault-password-file vault.pass

ansible-playbook playbook.yml --vault-password-file vault.pass

ansible-playbook -i hosts site.yml --ask-vault-pass

ansible-playbook site.yml --ask-vault-pass

[local]
localhost

[deploy]

[stage]

lineinfile insertafter

    - name: "Refresh inventory file"
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - meta: refresh_inventory

TASK [Gathering Facts] *********************************************************************************
The authenticity of host '54.86.73.215 (54.86.73.215)' can't be established.
ECDSA key fingerprint is SHA256:X0rj0OudokJf0t4kWE/VbZWNphbayWQ1G4Df+U8V5ks.
Are you sure you want to continue connecting (yes/no/[fingerprint])?

fatal: [54.86.73.215]: UNREACHABLE! => {"changed": false, "msg": "Failed to connect to the host via ssh: Warning: Permanently added '54.86.73.215' (ECDSA) to the list of known hosts.\r\nno such identity: my-key.pem: No such file or directory\r\nubuntu@54.86.73.215: Permission denied (publickey).", "unreachable": true}

Failed to add the host to the list of known hosts (/home/alex/.ssh/known_hosts).

/etc/ansible/ansible.cfg

ubuntu@ip-172-31-17-251:~$ ls -a /home/ubuntu/repos/target/
.  ..  classes  generated-sources  hello-1.0  
hello-1.0.war  maven-archiver  maven-status

- name: Simple PUT operation
  amazon.aws.aws_s3:
    bucket: test10062022
    object: /home/ubuntu/repos/target/hello-1.0.war
    mode: put

aws s3 rb s3://test10062022 --force  
aws s3 ls s3://test10062022
delegate_to: "{{ ec2_instance_ip }}"

sudo apt-get -y install python3-pip

aws_s3 put Failed to import the required Python library (botocore or boto3)

"msg": "Bucket already exists."

[webservers:children]
web_dev
web_prod

http://44.206.243.206:8080/

http://ec2-44-206-243-206.compute-1.amazonaws.com:8080/